// ==UserScript==
// @name         InstaTwit
// @namespace    http://tampermonkey.net/
// @version      0.5
// @description  try to take over the world!
// @author       You
// @grant        GM_addStyle
// @require      http://code.jquery.com/jquery-latest.js
// @include		 https://www.instagram.com/*
// @include		 https://twitter.com/*
// ==/UserScript==

(function() {
    'use strict';

    // Your code here...
    $(document).ready(function() {
        //set up varibales to click like buttons for Instagram and Twitter
        let instaLike = () => {
            $('button > span.glyphsSpriteHeart__outline__24__grey_9.u-__7').click();
        }
        let twitLike = () => {
            $('div > button.ProfileTweet-actionButton.js-actionButton.js-actionFavorite').click();
        }

        //Check which website you are on.
        const checkSite = () => {
            if (window.location.href.indexOf('instagram') > -1) {
                console.log('Instagram detected');
                return 0;
            } else if (window.location.href.indexOf('twitter') > -1) {
                console.log('Twitter detected');
                return 1;
            }
        }
        const site = checkSite();

        //like upon opening Instagram (less prone to banning)
        site == 0 ? instaLike() : null;

        //like and scroll if on Instagram.
        const likeScroll = () => {
            if (site == 0) {
                instaLike();
                window.scrollBy(0,4000);
            } else if (site == 1){
                twitLike();
            } else console.log ('Error: Cannot recognise like button for Instagram or Twitter, please inspect page to find the correct elements.');
            console.log('liked');
        }

        //variable to set intervals if we want to repeat automatically.
        let int;

        //use this if want to create a function that reloads the page after a certain time to like newer posts
        //location.reload()

        //create button to click to start chosen function;
        let zNode       = document.createElement ('div');
        zNode.innerHTML = '<button id="myButton" type="button" class="bewton">Click me if you dare!</button>';
        zNode.setAttribute ('id', 'myContainer');
        document.body.appendChild (zNode);

        $('#myButton').on('click', function () {
            let zNode       = document.createElement ('p');
            zNode.innerHTML = 'The button was clicked.';
            document.getElementById ("myContainer").appendChild (zNode);
            console.log('clicked');
            likeScroll();
            //int = setInterval(likeScroll, 10000);
        });

        //Second button to stop the repeating fucntion from first button
        let xNode       = document.createElement ('div');
        xNode.innerHTML = '<button id="secButton" type="button" class="bewton">Stop right there!</button>'
        ;
        xNode.setAttribute ('id', 'secContainer');
        document.body.appendChild (xNode);

        $('#secButton').on('click', function () {
            let xNode       = document.createElement ('p');
            xNode.innerHTML = 'The button was clicked.';
            document.getElementById ("secContainer").appendChild (xNode);
            clearInterval(int);
            console.log('stopped');
        });

        //--- Style our newly added elements using CSS.
        GM_addStyle ( `
#myContainer {
position:               fixed;
top:                    0;
left:                   0;
font-size:              20px;
background:             orange;
border:                 3px outset black;
margin:                 5px;
opacity:                0.9;
z-index:                9999;
padding:                5px 20px;
}
.bewton {
cursor:                 pointer;
}
#myContainer p {
color:                  red;
background:             white;
}
#secContainer {
position:               fixed;
top:                    0;
right:                   0;
font-size:              20px;
background:             orange;
border:                 3px outset black;
margin:                 5px;
opacity:                0.9;
z-index:                9999;
padding:                5px 20px;
}
#secContainer p {
color:                  red;
background:             white;
}
` );

    });
})();